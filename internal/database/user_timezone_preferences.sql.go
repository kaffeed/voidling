// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: user_timezone_preferences.sql

package database

import (
	"context"
)

const createUserTimezone = `-- name: CreateUserTimezone :one
INSERT INTO user_timezone_preferences (discord_user_id, timezone)
VALUES (?, ?)
RETURNING id, discord_user_id, timezone, created_at, updated_at
`

type CreateUserTimezoneParams struct {
	DiscordUserID int64  `json:"discord_user_id"`
	Timezone      string `json:"timezone"`
}

func (q *Queries) CreateUserTimezone(ctx context.Context, arg CreateUserTimezoneParams) (UserTimezonePreference, error) {
	row := q.db.QueryRowContext(ctx, createUserTimezone, arg.DiscordUserID, arg.Timezone)
	var i UserTimezonePreference
	err := row.Scan(
		&i.ID,
		&i.DiscordUserID,
		&i.Timezone,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUserTimezone = `-- name: DeleteUserTimezone :exec
DELETE FROM user_timezone_preferences
WHERE discord_user_id = ?
`

func (q *Queries) DeleteUserTimezone(ctx context.Context, discordUserID int64) error {
	_, err := q.db.ExecContext(ctx, deleteUserTimezone, discordUserID)
	return err
}

const getUserTimezone = `-- name: GetUserTimezone :one
SELECT id, discord_user_id, timezone, created_at, updated_at FROM user_timezone_preferences
WHERE discord_user_id = ?
LIMIT 1
`

func (q *Queries) GetUserTimezone(ctx context.Context, discordUserID int64) (UserTimezonePreference, error) {
	row := q.db.QueryRowContext(ctx, getUserTimezone, discordUserID)
	var i UserTimezonePreference
	err := row.Scan(
		&i.ID,
		&i.DiscordUserID,
		&i.Timezone,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUserTimezone = `-- name: UpdateUserTimezone :exec
UPDATE user_timezone_preferences
SET timezone = ?, updated_at = CURRENT_TIMESTAMP
WHERE discord_user_id = ?
`

type UpdateUserTimezoneParams struct {
	Timezone      string `json:"timezone"`
	DiscordUserID int64  `json:"discord_user_id"`
}

func (q *Queries) UpdateUserTimezone(ctx context.Context, arg UpdateUserTimezoneParams) error {
	_, err := q.db.ExecContext(ctx, updateUserTimezone, arg.Timezone, arg.DiscordUserID)
	return err
}

const upsertUserTimezone = `-- name: UpsertUserTimezone :exec
INSERT INTO user_timezone_preferences (discord_user_id, timezone)
VALUES (?, ?)
ON CONFLICT(discord_user_id) DO UPDATE SET
    timezone = excluded.timezone,
    updated_at = CURRENT_TIMESTAMP
`

type UpsertUserTimezoneParams struct {
	DiscordUserID int64  `json:"discord_user_id"`
	Timezone      string `json:"timezone"`
}

func (q *Queries) UpsertUserTimezone(ctx context.Context, arg UpsertUserTimezoneParams) error {
	_, err := q.db.ExecContext(ctx, upsertUserTimezone, arg.DiscordUserID, arg.Timezone)
	return err
}

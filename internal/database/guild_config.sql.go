// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: guild_config.sql

package database

import (
	"context"
	"database/sql"
)

const createGuildConfig = `-- name: CreateGuildConfig :one
INSERT INTO guild_config (guild_id, coordinator_role_id)
VALUES (?, ?)
RETURNING id, guild_id, coordinator_role_id, created_at, updated_at, competition_code_channel_id, default_timezone, event_notification_role_id, event_notification_channel_id
`

type CreateGuildConfigParams struct {
	GuildID           int64         `json:"guild_id"`
	CoordinatorRoleID sql.NullInt64 `json:"coordinator_role_id"`
}

func (q *Queries) CreateGuildConfig(ctx context.Context, arg CreateGuildConfigParams) (GuildConfig, error) {
	row := q.db.QueryRowContext(ctx, createGuildConfig, arg.GuildID, arg.CoordinatorRoleID)
	var i GuildConfig
	err := row.Scan(
		&i.ID,
		&i.GuildID,
		&i.CoordinatorRoleID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CompetitionCodeChannelID,
		&i.DefaultTimezone,
		&i.EventNotificationRoleID,
		&i.EventNotificationChannelID,
	)
	return i, err
}

const getGuildConfig = `-- name: GetGuildConfig :one
SELECT id, guild_id, coordinator_role_id, created_at, updated_at, competition_code_channel_id, default_timezone, event_notification_role_id, event_notification_channel_id FROM guild_config
WHERE guild_id = ?
LIMIT 1
`

func (q *Queries) GetGuildConfig(ctx context.Context, guildID int64) (GuildConfig, error) {
	row := q.db.QueryRowContext(ctx, getGuildConfig, guildID)
	var i GuildConfig
	err := row.Scan(
		&i.ID,
		&i.GuildID,
		&i.CoordinatorRoleID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CompetitionCodeChannelID,
		&i.DefaultTimezone,
		&i.EventNotificationRoleID,
		&i.EventNotificationChannelID,
	)
	return i, err
}

const updateCompetitionCodeChannel = `-- name: UpdateCompetitionCodeChannel :exec
UPDATE guild_config
SET competition_code_channel_id = ?, updated_at = CURRENT_TIMESTAMP
WHERE guild_id = ?
`

type UpdateCompetitionCodeChannelParams struct {
	CompetitionCodeChannelID sql.NullInt64 `json:"competition_code_channel_id"`
	GuildID                  int64         `json:"guild_id"`
}

func (q *Queries) UpdateCompetitionCodeChannel(ctx context.Context, arg UpdateCompetitionCodeChannelParams) error {
	_, err := q.db.ExecContext(ctx, updateCompetitionCodeChannel, arg.CompetitionCodeChannelID, arg.GuildID)
	return err
}

const updateCoordinatorRole = `-- name: UpdateCoordinatorRole :exec
UPDATE guild_config
SET coordinator_role_id = ?, updated_at = CURRENT_TIMESTAMP
WHERE guild_id = ?
`

type UpdateCoordinatorRoleParams struct {
	CoordinatorRoleID sql.NullInt64 `json:"coordinator_role_id"`
	GuildID           int64         `json:"guild_id"`
}

func (q *Queries) UpdateCoordinatorRole(ctx context.Context, arg UpdateCoordinatorRoleParams) error {
	_, err := q.db.ExecContext(ctx, updateCoordinatorRole, arg.CoordinatorRoleID, arg.GuildID)
	return err
}

const updateDefaultTimezone = `-- name: UpdateDefaultTimezone :exec
UPDATE guild_config
SET default_timezone = ?, updated_at = CURRENT_TIMESTAMP
WHERE guild_id = ?
`

type UpdateDefaultTimezoneParams struct {
	DefaultTimezone sql.NullString `json:"default_timezone"`
	GuildID         int64          `json:"guild_id"`
}

func (q *Queries) UpdateDefaultTimezone(ctx context.Context, arg UpdateDefaultTimezoneParams) error {
	_, err := q.db.ExecContext(ctx, updateDefaultTimezone, arg.DefaultTimezone, arg.GuildID)
	return err
}

const updateEventNotificationChannel = `-- name: UpdateEventNotificationChannel :exec
UPDATE guild_config
SET event_notification_channel_id = ?, updated_at = CURRENT_TIMESTAMP
WHERE guild_id = ?
`

type UpdateEventNotificationChannelParams struct {
	EventNotificationChannelID sql.NullInt64 `json:"event_notification_channel_id"`
	GuildID                    int64         `json:"guild_id"`
}

func (q *Queries) UpdateEventNotificationChannel(ctx context.Context, arg UpdateEventNotificationChannelParams) error {
	_, err := q.db.ExecContext(ctx, updateEventNotificationChannel, arg.EventNotificationChannelID, arg.GuildID)
	return err
}

const updateEventNotificationRole = `-- name: UpdateEventNotificationRole :exec
UPDATE guild_config
SET event_notification_role_id = ?, updated_at = CURRENT_TIMESTAMP
WHERE guild_id = ?
`

type UpdateEventNotificationRoleParams struct {
	EventNotificationRoleID sql.NullInt64 `json:"event_notification_role_id"`
	GuildID                 int64         `json:"guild_id"`
}

func (q *Queries) UpdateEventNotificationRole(ctx context.Context, arg UpdateEventNotificationRoleParams) error {
	_, err := q.db.ExecContext(ctx, updateEventNotificationRole, arg.EventNotificationRoleID, arg.GuildID)
	return err
}

const upsertGuildConfig = `-- name: UpsertGuildConfig :exec
INSERT INTO guild_config (guild_id, coordinator_role_id, competition_code_channel_id, default_timezone, event_notification_role_id)
VALUES (?, ?, ?, ?, ?)
ON CONFLICT(guild_id) DO UPDATE SET
    coordinator_role_id = excluded.coordinator_role_id,
    competition_code_channel_id = excluded.competition_code_channel_id,
    default_timezone = excluded.default_timezone,
    event_notification_role_id = excluded.event_notification_role_id,
    updated_at = CURRENT_TIMESTAMP
`

type UpsertGuildConfigParams struct {
	GuildID                  int64          `json:"guild_id"`
	CoordinatorRoleID        sql.NullInt64  `json:"coordinator_role_id"`
	CompetitionCodeChannelID sql.NullInt64  `json:"competition_code_channel_id"`
	DefaultTimezone          sql.NullString `json:"default_timezone"`
	EventNotificationRoleID  sql.NullInt64  `json:"event_notification_role_id"`
}

func (q *Queries) UpsertGuildConfig(ctx context.Context, arg UpsertGuildConfigParams) error {
	_, err := q.db.ExecContext(ctx, upsertGuildConfig,
		arg.GuildID,
		arg.CoordinatorRoleID,
		arg.CompetitionCodeChannelID,
		arg.DefaultTimezone,
		arg.EventNotificationRoleID,
	)
	return err
}

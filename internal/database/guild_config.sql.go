// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: guild_config.sql

package database

import (
	"context"
	"database/sql"
)

const createGuildConfig = `-- name: CreateGuildConfig :one
INSERT INTO guild_config (guild_id, coordinator_role_id)
VALUES (?, ?)
RETURNING id, guild_id, coordinator_role_id, created_at, updated_at
`

type CreateGuildConfigParams struct {
	GuildID           int64         `json:"guild_id"`
	CoordinatorRoleID sql.NullInt64 `json:"coordinator_role_id"`
}

func (q *Queries) CreateGuildConfig(ctx context.Context, arg CreateGuildConfigParams) (GuildConfig, error) {
	row := q.db.QueryRowContext(ctx, createGuildConfig, arg.GuildID, arg.CoordinatorRoleID)
	var i GuildConfig
	err := row.Scan(
		&i.ID,
		&i.GuildID,
		&i.CoordinatorRoleID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getGuildConfig = `-- name: GetGuildConfig :one
SELECT id, guild_id, coordinator_role_id, created_at, updated_at FROM guild_config
WHERE guild_id = ?
LIMIT 1
`

func (q *Queries) GetGuildConfig(ctx context.Context, guildID int64) (GuildConfig, error) {
	row := q.db.QueryRowContext(ctx, getGuildConfig, guildID)
	var i GuildConfig
	err := row.Scan(
		&i.ID,
		&i.GuildID,
		&i.CoordinatorRoleID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateCoordinatorRole = `-- name: UpdateCoordinatorRole :exec
UPDATE guild_config
SET coordinator_role_id = ?, updated_at = CURRENT_TIMESTAMP
WHERE guild_id = ?
`

type UpdateCoordinatorRoleParams struct {
	CoordinatorRoleID sql.NullInt64 `json:"coordinator_role_id"`
	GuildID           int64         `json:"guild_id"`
}

func (q *Queries) UpdateCoordinatorRole(ctx context.Context, arg UpdateCoordinatorRoleParams) error {
	_, err := q.db.ExecContext(ctx, updateCoordinatorRole, arg.CoordinatorRoleID, arg.GuildID)
	return err
}

const upsertGuildConfig = `-- name: UpsertGuildConfig :exec
INSERT INTO guild_config (guild_id, coordinator_role_id)
VALUES (?, ?)
ON CONFLICT(guild_id) DO UPDATE SET
    coordinator_role_id = excluded.coordinator_role_id,
    updated_at = CURRENT_TIMESTAMP
`

type UpsertGuildConfigParams struct {
	GuildID           int64         `json:"guild_id"`
	CoordinatorRoleID sql.NullInt64 `json:"coordinator_role_id"`
}

func (q *Queries) UpsertGuildConfig(ctx context.Context, arg UpsertGuildConfigParams) error {
	_, err := q.db.ExecContext(ctx, upsertGuildConfig, arg.GuildID, arg.CoordinatorRoleID)
	return err
}

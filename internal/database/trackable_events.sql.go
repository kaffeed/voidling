// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: trackable_events.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const createTrackableEvent = `-- name: CreateTrackableEvent :one
INSERT INTO trackable_events (type, activity, is_active)
VALUES (?, ?, ?)
RETURNING id, type, activity, is_active, created_at
`

type CreateTrackableEventParams struct {
	Type     string `json:"type"`
	Activity string `json:"activity"`
	IsActive bool   `json:"is_active"`
}

func (q *Queries) CreateTrackableEvent(ctx context.Context, arg CreateTrackableEventParams) (TrackableEvent, error) {
	row := q.db.QueryRowContext(ctx, createTrackableEvent, arg.Type, arg.Activity, arg.IsActive)
	var i TrackableEvent
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.Activity,
		&i.IsActive,
		&i.CreatedAt,
	)
	return i, err
}

const createTrackableParticipation = `-- name: CreateTrackableParticipation :one
INSERT INTO trackable_event_participations (event_id, account_link_id, starting_point)
VALUES (?, ?, ?)
RETURNING id, event_id, account_link_id, starting_point, end_point, created_at
`

type CreateTrackableParticipationParams struct {
	EventID       int64 `json:"event_id"`
	AccountLinkID int64 `json:"account_link_id"`
	StartingPoint int64 `json:"starting_point"`
}

func (q *Queries) CreateTrackableParticipation(ctx context.Context, arg CreateTrackableParticipationParams) (TrackableEventParticipation, error) {
	row := q.db.QueryRowContext(ctx, createTrackableParticipation, arg.EventID, arg.AccountLinkID, arg.StartingPoint)
	var i TrackableEventParticipation
	err := row.Scan(
		&i.ID,
		&i.EventID,
		&i.AccountLinkID,
		&i.StartingPoint,
		&i.EndPoint,
		&i.CreatedAt,
	)
	return i, err
}

const createTrackableProgress = `-- name: CreateTrackableProgress :exec
INSERT INTO trackable_event_progress (participation_id, progress, fetched_at)
VALUES (?, ?, ?)
`

type CreateTrackableProgressParams struct {
	ParticipationID int64     `json:"participation_id"`
	Progress        int64     `json:"progress"`
	FetchedAt       time.Time `json:"fetched_at"`
}

func (q *Queries) CreateTrackableProgress(ctx context.Context, arg CreateTrackableProgressParams) error {
	_, err := q.db.ExecContext(ctx, createTrackableProgress, arg.ParticipationID, arg.Progress, arg.FetchedAt)
	return err
}

const deactivateTrackableEvent = `-- name: DeactivateTrackableEvent :exec
UPDATE trackable_events
SET is_active = 0
WHERE id = ?
`

func (q *Queries) DeactivateTrackableEvent(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deactivateTrackableEvent, id)
	return err
}

const getActiveTrackableEvents = `-- name: GetActiveTrackableEvents :many
SELECT id, type, activity, is_active, created_at FROM trackable_events
WHERE is_active = 1
ORDER BY created_at DESC
`

func (q *Queries) GetActiveTrackableEvents(ctx context.Context) ([]TrackableEvent, error) {
	rows, err := q.db.QueryContext(ctx, getActiveTrackableEvents)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TrackableEvent{}
	for rows.Next() {
		var i TrackableEvent
		if err := rows.Scan(
			&i.ID,
			&i.Type,
			&i.Activity,
			&i.IsActive,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getActiveTrackableEventsByType = `-- name: GetActiveTrackableEventsByType :many
SELECT id, type, activity, is_active, created_at FROM trackable_events
WHERE type = ? AND is_active = 1
ORDER BY created_at DESC
`

func (q *Queries) GetActiveTrackableEventsByType(ctx context.Context, type_ string) ([]TrackableEvent, error) {
	rows, err := q.db.QueryContext(ctx, getActiveTrackableEventsByType, type_)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TrackableEvent{}
	for rows.Next() {
		var i TrackableEvent
		if err := rows.Scan(
			&i.ID,
			&i.Type,
			&i.Activity,
			&i.IsActive,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllEventWinnersByType = `-- name: GetAllEventWinnersByType :many
SELECT
    te.id as event_id,
    al.runescape_name,
    (tep.end_point - tep.starting_point) as progress
FROM trackable_events te
JOIN trackable_event_participations tep ON te.id = tep.event_id
JOIN account_links al ON tep.account_link_id = al.id
WHERE te.type = ? AND tep.end_point IS NOT NULL AND te.is_active = 0
ORDER BY te.created_at DESC
`

type GetAllEventWinnersByTypeRow struct {
	EventID       int64       `json:"event_id"`
	RunescapeName string      `json:"runescape_name"`
	Progress      interface{} `json:"progress"`
}

func (q *Queries) GetAllEventWinnersByType(ctx context.Context, type_ string) ([]GetAllEventWinnersByTypeRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllEventWinnersByType, type_)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAllEventWinnersByTypeRow{}
	for rows.Next() {
		var i GetAllEventWinnersByTypeRow
		if err := rows.Scan(&i.EventID, &i.RunescapeName, &i.Progress); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEventWinners = `-- name: GetEventWinners :many
SELECT
    al.runescape_name,
    al.discord_member_id,
    tep.starting_point,
    tep.end_point,
    (tep.end_point - tep.starting_point) as progress
FROM trackable_event_participations tep
JOIN account_links al ON tep.account_link_id = al.id
WHERE tep.event_id = ? AND tep.end_point IS NOT NULL
ORDER BY progress DESC
LIMIT 3
`

type GetEventWinnersRow struct {
	RunescapeName   string        `json:"runescape_name"`
	DiscordMemberID int64         `json:"discord_member_id"`
	StartingPoint   int64         `json:"starting_point"`
	EndPoint        sql.NullInt64 `json:"end_point"`
	Progress        interface{}   `json:"progress"`
}

func (q *Queries) GetEventWinners(ctx context.Context, eventID int64) ([]GetEventWinnersRow, error) {
	rows, err := q.db.QueryContext(ctx, getEventWinners, eventID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetEventWinnersRow{}
	for rows.Next() {
		var i GetEventWinnersRow
		if err := rows.Scan(
			&i.RunescapeName,
			&i.DiscordMemberID,
			&i.StartingPoint,
			&i.EndPoint,
			&i.Progress,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLastActiveEventByType = `-- name: GetLastActiveEventByType :one
SELECT id, type, activity, is_active, created_at FROM trackable_events
WHERE type = ? AND is_active = 1
ORDER BY id DESC
LIMIT 1
`

func (q *Queries) GetLastActiveEventByType(ctx context.Context, type_ string) (TrackableEvent, error) {
	row := q.db.QueryRowContext(ctx, getLastActiveEventByType, type_)
	var i TrackableEvent
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.Activity,
		&i.IsActive,
		&i.CreatedAt,
	)
	return i, err
}

const getProgressForParticipation = `-- name: GetProgressForParticipation :many
SELECT id, participation_id, progress, fetched_at FROM trackable_event_progress
WHERE participation_id = ?
ORDER BY fetched_at DESC
`

func (q *Queries) GetProgressForParticipation(ctx context.Context, participationID int64) ([]TrackableEventProgress, error) {
	rows, err := q.db.QueryContext(ctx, getProgressForParticipation, participationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TrackableEventProgress{}
	for rows.Next() {
		var i TrackableEventProgress
		if err := rows.Scan(
			&i.ID,
			&i.ParticipationID,
			&i.Progress,
			&i.FetchedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTrackableEventByID = `-- name: GetTrackableEventByID :one
SELECT id, type, activity, is_active, created_at FROM trackable_events
WHERE id = ?
LIMIT 1
`

func (q *Queries) GetTrackableEventByID(ctx context.Context, id int64) (TrackableEvent, error) {
	row := q.db.QueryRowContext(ctx, getTrackableEventByID, id)
	var i TrackableEvent
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.Activity,
		&i.IsActive,
		&i.CreatedAt,
	)
	return i, err
}

const getTrackableParticipation = `-- name: GetTrackableParticipation :one
SELECT id, event_id, account_link_id, starting_point, end_point, created_at FROM trackable_event_participations
WHERE event_id = ? AND account_link_id = ?
LIMIT 1
`

type GetTrackableParticipationParams struct {
	EventID       int64 `json:"event_id"`
	AccountLinkID int64 `json:"account_link_id"`
}

func (q *Queries) GetTrackableParticipation(ctx context.Context, arg GetTrackableParticipationParams) (TrackableEventParticipation, error) {
	row := q.db.QueryRowContext(ctx, getTrackableParticipation, arg.EventID, arg.AccountLinkID)
	var i TrackableEventParticipation
	err := row.Scan(
		&i.ID,
		&i.EventID,
		&i.AccountLinkID,
		&i.StartingPoint,
		&i.EndPoint,
		&i.CreatedAt,
	)
	return i, err
}

const getTrackableParticipationsByEvent = `-- name: GetTrackableParticipationsByEvent :many
SELECT tep.id, tep.event_id, tep.account_link_id, tep.starting_point, tep.end_point, tep.created_at, al.discord_member_id, al.runescape_name
FROM trackable_event_participations tep
JOIN account_links al ON tep.account_link_id = al.id
WHERE tep.event_id = ?
ORDER BY tep.created_at
`

type GetTrackableParticipationsByEventRow struct {
	ID              int64         `json:"id"`
	EventID         int64         `json:"event_id"`
	AccountLinkID   int64         `json:"account_link_id"`
	StartingPoint   int64         `json:"starting_point"`
	EndPoint        sql.NullInt64 `json:"end_point"`
	CreatedAt       time.Time     `json:"created_at"`
	DiscordMemberID int64         `json:"discord_member_id"`
	RunescapeName   string        `json:"runescape_name"`
}

func (q *Queries) GetTrackableParticipationsByEvent(ctx context.Context, eventID int64) ([]GetTrackableParticipationsByEventRow, error) {
	rows, err := q.db.QueryContext(ctx, getTrackableParticipationsByEvent, eventID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetTrackableParticipationsByEventRow{}
	for rows.Next() {
		var i GetTrackableParticipationsByEventRow
		if err := rows.Scan(
			&i.ID,
			&i.EventID,
			&i.AccountLinkID,
			&i.StartingPoint,
			&i.EndPoint,
			&i.CreatedAt,
			&i.DiscordMemberID,
			&i.RunescapeName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTrackableParticipationEndPoint = `-- name: UpdateTrackableParticipationEndPoint :exec
UPDATE trackable_event_participations
SET end_point = ?
WHERE id = ?
`

type UpdateTrackableParticipationEndPointParams struct {
	EndPoint sql.NullInt64 `json:"end_point"`
	ID       int64         `json:"id"`
}

func (q *Queries) UpdateTrackableParticipationEndPoint(ctx context.Context, arg UpdateTrackableParticipationEndPointParams) error {
	_, err := q.db.ExecContext(ctx, updateTrackableParticipationEndPoint, arg.EndPoint, arg.ID)
	return err
}

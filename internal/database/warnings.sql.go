// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: warnings.sql

package database

import (
	"context"
)

const createWarning = `-- name: CreateWarning :one
INSERT INTO warnings (guild_id, user_id, moderator_id, reason)
VALUES (?, ?, ?, ?)
RETURNING id, guild_id, user_id, moderator_id, reason, created_at
`

type CreateWarningParams struct {
	GuildID     int64  `json:"guild_id"`
	UserID      int64  `json:"user_id"`
	ModeratorID int64  `json:"moderator_id"`
	Reason      string `json:"reason"`
}

func (q *Queries) CreateWarning(ctx context.Context, arg CreateWarningParams) (Warning, error) {
	row := q.db.QueryRowContext(ctx, createWarning,
		arg.GuildID,
		arg.UserID,
		arg.ModeratorID,
		arg.Reason,
	)
	var i Warning
	err := row.Scan(
		&i.ID,
		&i.GuildID,
		&i.UserID,
		&i.ModeratorID,
		&i.Reason,
		&i.CreatedAt,
	)
	return i, err
}

const deleteGuildWarningChannel = `-- name: DeleteGuildWarningChannel :exec
DELETE FROM guild_warning_channels
WHERE guild_id = ?
`

func (q *Queries) DeleteGuildWarningChannel(ctx context.Context, guildID int64) error {
	_, err := q.db.ExecContext(ctx, deleteGuildWarningChannel, guildID)
	return err
}

const getGuildWarningChannel = `-- name: GetGuildWarningChannel :one
SELECT id, guild_id, channel_id, created_at FROM guild_warning_channels
WHERE guild_id = ?
LIMIT 1
`

func (q *Queries) GetGuildWarningChannel(ctx context.Context, guildID int64) (GuildWarningChannel, error) {
	row := q.db.QueryRowContext(ctx, getGuildWarningChannel, guildID)
	var i GuildWarningChannel
	err := row.Scan(
		&i.ID,
		&i.GuildID,
		&i.ChannelID,
		&i.CreatedAt,
	)
	return i, err
}

const getWarningByID = `-- name: GetWarningByID :one
SELECT id, guild_id, user_id, moderator_id, reason, created_at FROM warnings
WHERE id = ?
LIMIT 1
`

func (q *Queries) GetWarningByID(ctx context.Context, id int64) (Warning, error) {
	row := q.db.QueryRowContext(ctx, getWarningByID, id)
	var i Warning
	err := row.Scan(
		&i.ID,
		&i.GuildID,
		&i.UserID,
		&i.ModeratorID,
		&i.Reason,
		&i.CreatedAt,
	)
	return i, err
}

const getWarningsByGuild = `-- name: GetWarningsByGuild :many
SELECT id, guild_id, user_id, moderator_id, reason, created_at FROM warnings
WHERE guild_id = ?
ORDER BY created_at DESC
`

func (q *Queries) GetWarningsByGuild(ctx context.Context, guildID int64) ([]Warning, error) {
	rows, err := q.db.QueryContext(ctx, getWarningsByGuild, guildID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Warning{}
	for rows.Next() {
		var i Warning
		if err := rows.Scan(
			&i.ID,
			&i.GuildID,
			&i.UserID,
			&i.ModeratorID,
			&i.Reason,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWarningsByUser = `-- name: GetWarningsByUser :many
SELECT id, guild_id, user_id, moderator_id, reason, created_at FROM warnings
WHERE guild_id = ? AND user_id = ?
ORDER BY created_at DESC
`

type GetWarningsByUserParams struct {
	GuildID int64 `json:"guild_id"`
	UserID  int64 `json:"user_id"`
}

func (q *Queries) GetWarningsByUser(ctx context.Context, arg GetWarningsByUserParams) ([]Warning, error) {
	rows, err := q.db.QueryContext(ctx, getWarningsByUser, arg.GuildID, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Warning{}
	for rows.Next() {
		var i Warning
		if err := rows.Scan(
			&i.ID,
			&i.GuildID,
			&i.UserID,
			&i.ModeratorID,
			&i.Reason,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setGuildWarningChannel = `-- name: SetGuildWarningChannel :one
INSERT INTO guild_warning_channels (guild_id, channel_id)
VALUES (?, ?)
ON CONFLICT(guild_id) DO UPDATE SET channel_id = excluded.channel_id
RETURNING id, guild_id, channel_id, created_at
`

type SetGuildWarningChannelParams struct {
	GuildID   int64 `json:"guild_id"`
	ChannelID int64 `json:"channel_id"`
}

func (q *Queries) SetGuildWarningChannel(ctx context.Context, arg SetGuildWarningChannelParams) (GuildWarningChannel, error) {
	row := q.db.QueryRowContext(ctx, setGuildWarningChannel, arg.GuildID, arg.ChannelID)
	var i GuildWarningChannel
	err := row.Scan(
		&i.ID,
		&i.GuildID,
		&i.ChannelID,
		&i.CreatedAt,
	)
	return i, err
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: wom_competitions.sql

package database

import (
	"context"
)

const createWOMCompetition = `-- name: CreateWOMCompetition :one
INSERT INTO wom_competitions (wom_competition_id, verification_code, discord_thread_id, metric, type)
VALUES (?, ?, ?, ?, ?)
RETURNING id, wom_competition_id, verification_code, discord_thread_id, metric, type, created_at
`

type CreateWOMCompetitionParams struct {
	WomCompetitionID int64  `json:"wom_competition_id"`
	VerificationCode string `json:"verification_code"`
	DiscordThreadID  string `json:"discord_thread_id"`
	Metric           string `json:"metric"`
	Type             string `json:"type"`
}

func (q *Queries) CreateWOMCompetition(ctx context.Context, arg CreateWOMCompetitionParams) (WomCompetition, error) {
	row := q.db.QueryRowContext(ctx, createWOMCompetition,
		arg.WomCompetitionID,
		arg.VerificationCode,
		arg.DiscordThreadID,
		arg.Metric,
		arg.Type,
	)
	var i WomCompetition
	err := row.Scan(
		&i.ID,
		&i.WomCompetitionID,
		&i.VerificationCode,
		&i.DiscordThreadID,
		&i.Metric,
		&i.Type,
		&i.CreatedAt,
	)
	return i, err
}

const deleteWOMCompetition = `-- name: DeleteWOMCompetition :exec
DELETE FROM wom_competitions
WHERE id = ?
`

func (q *Queries) DeleteWOMCompetition(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteWOMCompetition, id)
	return err
}

const getLatestWOMCompetitionByType = `-- name: GetLatestWOMCompetitionByType :one
SELECT id, wom_competition_id, verification_code, discord_thread_id, metric, type, created_at FROM wom_competitions
WHERE type = ?
ORDER BY created_at DESC
LIMIT 1
`

func (q *Queries) GetLatestWOMCompetitionByType(ctx context.Context, type_ string) (WomCompetition, error) {
	row := q.db.QueryRowContext(ctx, getLatestWOMCompetitionByType, type_)
	var i WomCompetition
	err := row.Scan(
		&i.ID,
		&i.WomCompetitionID,
		&i.VerificationCode,
		&i.DiscordThreadID,
		&i.Metric,
		&i.Type,
		&i.CreatedAt,
	)
	return i, err
}

const getWOMCompetitionByID = `-- name: GetWOMCompetitionByID :one
SELECT id, wom_competition_id, verification_code, discord_thread_id, metric, type, created_at FROM wom_competitions
WHERE id = ?
LIMIT 1
`

func (q *Queries) GetWOMCompetitionByID(ctx context.Context, id int64) (WomCompetition, error) {
	row := q.db.QueryRowContext(ctx, getWOMCompetitionByID, id)
	var i WomCompetition
	err := row.Scan(
		&i.ID,
		&i.WomCompetitionID,
		&i.VerificationCode,
		&i.DiscordThreadID,
		&i.Metric,
		&i.Type,
		&i.CreatedAt,
	)
	return i, err
}

const getWOMCompetitionByThreadID = `-- name: GetWOMCompetitionByThreadID :one
SELECT id, wom_competition_id, verification_code, discord_thread_id, metric, type, created_at FROM wom_competitions
WHERE discord_thread_id = ?
LIMIT 1
`

func (q *Queries) GetWOMCompetitionByThreadID(ctx context.Context, discordThreadID string) (WomCompetition, error) {
	row := q.db.QueryRowContext(ctx, getWOMCompetitionByThreadID, discordThreadID)
	var i WomCompetition
	err := row.Scan(
		&i.ID,
		&i.WomCompetitionID,
		&i.VerificationCode,
		&i.DiscordThreadID,
		&i.Metric,
		&i.Type,
		&i.CreatedAt,
	)
	return i, err
}

const getWOMCompetitionByWOMID = `-- name: GetWOMCompetitionByWOMID :one
SELECT id, wom_competition_id, verification_code, discord_thread_id, metric, type, created_at FROM wom_competitions
WHERE wom_competition_id = ?
LIMIT 1
`

func (q *Queries) GetWOMCompetitionByWOMID(ctx context.Context, womCompetitionID int64) (WomCompetition, error) {
	row := q.db.QueryRowContext(ctx, getWOMCompetitionByWOMID, womCompetitionID)
	var i WomCompetition
	err := row.Scan(
		&i.ID,
		&i.WomCompetitionID,
		&i.VerificationCode,
		&i.DiscordThreadID,
		&i.Metric,
		&i.Type,
		&i.CreatedAt,
	)
	return i, err
}

const getWOMCompetitionsByType = `-- name: GetWOMCompetitionsByType :many
SELECT id, wom_competition_id, verification_code, discord_thread_id, metric, type, created_at FROM wom_competitions
WHERE type = ?
ORDER BY created_at DESC
`

func (q *Queries) GetWOMCompetitionsByType(ctx context.Context, type_ string) ([]WomCompetition, error) {
	rows, err := q.db.QueryContext(ctx, getWOMCompetitionsByType, type_)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []WomCompetition{}
	for rows.Next() {
		var i WomCompetition
		if err := rows.Scan(
			&i.ID,
			&i.WomCompetitionID,
			&i.VerificationCode,
			&i.DiscordThreadID,
			&i.Metric,
			&i.Type,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

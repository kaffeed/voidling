// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: account_links.sql

package database

import (
	"context"
)

const activateAccountLink = `-- name: ActivateAccountLink :exec
UPDATE account_links
SET is_active = 1, updated_at = CURRENT_TIMESTAMP
WHERE id = ?
`

func (q *Queries) ActivateAccountLink(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, activateAccountLink, id)
	return err
}

const createAccountLink = `-- name: CreateAccountLink :one
INSERT INTO account_links (discord_member_id, runescape_name, is_active)
VALUES (?, ?, ?)
RETURNING id, discord_member_id, runescape_name, is_active, created_at, updated_at
`

type CreateAccountLinkParams struct {
	DiscordMemberID int64  `json:"discord_member_id"`
	RunescapeName   string `json:"runescape_name"`
	IsActive        bool   `json:"is_active"`
}

func (q *Queries) CreateAccountLink(ctx context.Context, arg CreateAccountLinkParams) (AccountLink, error) {
	row := q.db.QueryRowContext(ctx, createAccountLink, arg.DiscordMemberID, arg.RunescapeName, arg.IsActive)
	var i AccountLink
	err := row.Scan(
		&i.ID,
		&i.DiscordMemberID,
		&i.RunescapeName,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deactivateAccountLink = `-- name: DeactivateAccountLink :exec
UPDATE account_links
SET is_active = 0, updated_at = CURRENT_TIMESTAMP
WHERE id = ?
`

func (q *Queries) DeactivateAccountLink(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deactivateAccountLink, id)
	return err
}

const deactivateAllAccountLinksForUser = `-- name: DeactivateAllAccountLinksForUser :exec
UPDATE account_links
SET is_active = 0, updated_at = CURRENT_TIMESTAMP
WHERE discord_member_id = ?
`

func (q *Queries) DeactivateAllAccountLinksForUser(ctx context.Context, discordMemberID int64) error {
	_, err := q.db.ExecContext(ctx, deactivateAllAccountLinksForUser, discordMemberID)
	return err
}

const getAccountLinkByDiscordID = `-- name: GetAccountLinkByDiscordID :one
SELECT id, discord_member_id, runescape_name, is_active, created_at, updated_at FROM account_links
WHERE discord_member_id = ? AND is_active = 1
LIMIT 1
`

func (q *Queries) GetAccountLinkByDiscordID(ctx context.Context, discordMemberID int64) (AccountLink, error) {
	row := q.db.QueryRowContext(ctx, getAccountLinkByDiscordID, discordMemberID)
	var i AccountLink
	err := row.Scan(
		&i.ID,
		&i.DiscordMemberID,
		&i.RunescapeName,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAccountLinkByID = `-- name: GetAccountLinkByID :one
SELECT id, discord_member_id, runescape_name, is_active, created_at, updated_at FROM account_links
WHERE id = ?
LIMIT 1
`

func (q *Queries) GetAccountLinkByID(ctx context.Context, id int64) (AccountLink, error) {
	row := q.db.QueryRowContext(ctx, getAccountLinkByID, id)
	var i AccountLink
	err := row.Scan(
		&i.ID,
		&i.DiscordMemberID,
		&i.RunescapeName,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAccountLinkByUsername = `-- name: GetAccountLinkByUsername :one
SELECT id, discord_member_id, runescape_name, is_active, created_at, updated_at FROM account_links
WHERE runescape_name = ? AND is_active = 1
LIMIT 1
`

func (q *Queries) GetAccountLinkByUsername(ctx context.Context, runescapeName string) (AccountLink, error) {
	row := q.db.QueryRowContext(ctx, getAccountLinkByUsername, runescapeName)
	var i AccountLink
	err := row.Scan(
		&i.ID,
		&i.DiscordMemberID,
		&i.RunescapeName,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAllAccountLinksForUser = `-- name: GetAllAccountLinksForUser :many
SELECT id, discord_member_id, runescape_name, is_active, created_at, updated_at FROM account_links
WHERE discord_member_id = ?
ORDER BY created_at DESC
`

func (q *Queries) GetAllAccountLinksForUser(ctx context.Context, discordMemberID int64) ([]AccountLink, error) {
	rows, err := q.db.QueryContext(ctx, getAllAccountLinksForUser, discordMemberID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AccountLink{}
	for rows.Next() {
		var i AccountLink
		if err := rows.Scan(
			&i.ID,
			&i.DiscordMemberID,
			&i.RunescapeName,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getExistingAccountLink = `-- name: GetExistingAccountLink :one
SELECT id, discord_member_id, runescape_name, is_active, created_at, updated_at FROM account_links
WHERE discord_member_id = ? AND LOWER(runescape_name) = LOWER(?)
LIMIT 1
`

type GetExistingAccountLinkParams struct {
	DiscordMemberID int64  `json:"discord_member_id"`
	LOWER           string `json:"LOWER"`
}

func (q *Queries) GetExistingAccountLink(ctx context.Context, arg GetExistingAccountLinkParams) (AccountLink, error) {
	row := q.db.QueryRowContext(ctx, getExistingAccountLink, arg.DiscordMemberID, arg.LOWER)
	var i AccountLink
	err := row.Scan(
		&i.ID,
		&i.DiscordMemberID,
		&i.RunescapeName,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
